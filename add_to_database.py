# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_to_database.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import MySQLdb as mdb
from contextlib import closing



class Ui_AddToDatabaseWindow(object):
    def setupUi(self, AddToDatabaseWindow):
        AddToDatabaseWindow.setObjectName("AddToDatabaseWindow")
        AddToDatabaseWindow.resize(513, 531)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(AddToDatabaseWindow.sizePolicy().hasHeightForWidth())
        AddToDatabaseWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(AddToDatabaseWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 591, 51))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 70, 1161, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.saveBtn = QtWidgets.QPushButton(self.centralwidget)
        self.saveBtn.setGeometry(QtCore.QRect(120, 430, 241, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.saveBtn.setFont(font)
        self.saveBtn.setObjectName("saveBtn")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(80, 120, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 190, 331, 61))
        self.lineEdit.setObjectName("lineEdit")
        self.CatComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.CatComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.CatComboBox.setFont(font)
        self.CatComboBox.setObjectName("CatComboBox")
        self.TypesComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 300, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.TypesComboBox.setFont(font)
        self.TypesComboBox.setObjectName("TypesComboBox")
        self.AttrComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.AttrComboBox.setGeometry(QtCore.QRect(80, 350, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.AttrComboBox.setFont(font)
        self.AttrComboBox.setObjectName("AttrComboBox")
        self.FactsComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.FactsComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.FactsComboBox.setFont(font)
        self.FactsComboBox.setObjectName("FactsComboBox")
        self.createBtn = QtWidgets.QRadioButton(self.centralwidget)
        self.createBtn.setGeometry(QtCore.QRect(80, 180, 331, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.createBtn.setFont(font)
        self.createBtn.setObjectName("createBtn")
        self.buttonGroup = QtWidgets.QButtonGroup(AddToDatabaseWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.createBtn)
        self.convertBtn = QtWidgets.QRadioButton(self.centralwidget)
        self.convertBtn.setGeometry(QtCore.QRect(80, 210, 331, 23))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.convertBtn.setFont(font)
        self.convertBtn.setObjectName("convertBtn")
        self.buttonGroup.addButton(self.convertBtn)
        AddToDatabaseWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(AddToDatabaseWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 513, 22))
        self.menubar.setObjectName("menubar")
        self.menuInteractive_System_Modelling = QtWidgets.QMenu(self.menubar)
        self.menuInteractive_System_Modelling.setObjectName("menuInteractive_System_Modelling")
        AddToDatabaseWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(AddToDatabaseWindow)
        self.statusbar.setObjectName("statusbar")
        AddToDatabaseWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuInteractive_System_Modelling.menuAction())
        self.retranslateUi(AddToDatabaseWindow)
        QtCore.QMetaObject.connectSlotsByName(AddToDatabaseWindow)

        self.lineEdit.hide()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()
        self.FactsComboBox.hide()
        self.createBtn.hide()
        self.convertBtn.hide()

        self.version_id = QtWidgets.QLabel(self.centralwidget)
        self.version_id.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.version_id.setObjectName("version_id")

        self.comboBox.activated.connect(self.choose)
        self.saveBtn.clicked.connect(self.saveItem)
        self.saveBtn.clicked.connect(AddToDatabaseWindow.close)

    def choose(self):
        if (str(self.comboBox.currentText()) == "Domain" or 
            str(self.comboBox.currentText()) == "Category" or 
            str(self.comboBox.currentText()) == "Type" or 
            str(self.comboBox.currentText()) == "Attribute" or 
            str(self.comboBox.currentText()) == "Perception" or 
            str(self.comboBox.currentText()) == "Action"):
            self.simpleAdd()
        if (str(self.comboBox.currentText()) == "Fact"):
            self.addFact()
        if (str(self.comboBox.currentText()) == "Question"):
            self.addQuestion()

    def addFact(self):
        self.CatComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 300, 331, 41))
        self.CatComboBox.show()
        self.TypesComboBox.show()
        self.AttrComboBox.show()
        self.lineEdit.hide()
        self.FactsComboBox.hide()
        self.createBtn.hide()
        self.convertBtn.hide()
        self.CatComboBox.clear()
        self.TypesComboBox.clear()
        self.AttrComboBox.clear()
        self.FactsComboBox.clear()
        self.lineEdit.clear()
        self.createNew()

    def createNew(self):
        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM categories WHERE version_id = '%i'" % (version_id))
            categories = cur.fetchall()
            for x in categories:
                self.CatComboBox.addItem(x[2])
            cur.execute("SELECT * FROM types WHERE version_id = '%i'" % (version_id))
            types = cur.fetchall()
            for x in types:
                self.TypesComboBox.addItem(x[2])
            cur.execute("SELECT * FROM attributes WHERE version_id = '%i'" % (version_id))
            attributes = cur.fetchall()
            for x in attributes:
                self.AttrComboBox.addItem(x[2])
        
        

    def createQuestion(self):
        self.CatComboBox.setGeometry(QtCore.QRect(80, 300, 331, 41))
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        self.CatComboBox.show()
        self.TypesComboBox.show()
        self.AttrComboBox.show()
        self.FactsComboBox.hide()
        self.CatComboBox.clear()
        self.TypesComboBox.clear()
        self.AttrComboBox.clear()
        self.FactsComboBox.clear()
        self.lineEdit.clear()
        self.createNew()
        

    def convertQuestion(self):
        self.FactsComboBox.show()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()
        self.CatComboBox.clear()
        self.TypesComboBox.clear()
        self.AttrComboBox.clear()
        self.FactsComboBox.clear()
        self.lineEdit.clear()

        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM facts WHERE version_id = '%i'" % (version_id))
            facts = cur.fetchall()
            for x in facts:
                self.FactsComboBox.addItem(x[2])
        

    def addQuestion(self):
        self.createBtn.show()
        self.convertBtn.show()
        self.lineEdit.hide()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()
        self.FactsComboBox.hide()
        self.createBtn.clicked.connect(self.createQuestion)
        self.convertBtn.clicked.connect(self.convertQuestion)

    def simpleAdd(self):
        self.lineEdit.show()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()
        self.FactsComboBox.hide()
        self.createBtn.hide()
        self.convertBtn.hide()

    def saveItem(self):
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        version_id = int(self.version_id.text())
        with db:
            cur = db.cursor()

            if (str(self.comboBox.currentText()) == "Domain"):
                cur.execute("INSERT INTO domains(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))
            if (str(self.comboBox.currentText()) == "Category"):
                cur.execute("INSERT INTO categories(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))
            if (str(self.comboBox.currentText()) == "Type"):
                cur.execute("INSERT INTO types(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))
            if (str(self.comboBox.currentText()) == "Attribute"):
                cur.execute("INSERT INTO attributes(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))
            if (str(self.comboBox.currentText()) == "Fact"):
                cur_fact = str(self.CatComboBox.currentText()) + " " + str(self.TypesComboBox.currentText()) + " " + str(self.AttrComboBox.currentText())
                self.lineEdit.setText(cur_fact)
                cur.execute("INSERT INTO facts(version_id, value, categories, types, attributes)"
                        "VALUES('%i', '%s', '%s', '%s', '%s')" % (version_id, ''.join(self.lineEdit.text()), ''.join(self.CatComboBox.currentText()), 
                            ''.join(self.TypesComboBox.currentText()), ''.join(self.AttrComboBox.currentText())))
            if (str(self.comboBox.currentText()) == "Question"):

                cur_question = str(self.TypesComboBox.currentText()) + " " + str(self.CatComboBox.currentText()) + " " + str(self.AttrComboBox.currentText()) + "?"
                if (cur_question == "  ?"):
                    cur.execute("SELECT * FROM facts WHERE version_id = '%i' AND value = '%s'" % (version_id, ''.join(self.FactsComboBox.currentText())))
                    facts = cur.fetchall()
                    for fact in facts:
                        cur_question = fact[4] + " " + fact[3] + " " + fact[5] + "?"

                    self.lineEdit.setText(cur_question)
                    cur.execute("INSERT INTO questions(version_id, value, types, categories, attributes)"
                        "VALUES('%i', '%s', '%s', '%s', '%s')" % (version_id, ''.join(self.lineEdit.text()), fact[4], fact[3], fact[5]))
                else:
                    self.lineEdit.setText(cur_question)
                    cur.execute("INSERT INTO questions(version_id, value, types, categories, attributes) VALUES('%i', '%s', '%s', '%s', '%s')" 
                        % (version_id, ''.join(self.lineEdit.text()), ''.join(self.TypesComboBox.currentText()), ''.join(self.CatComboBox.currentText()), ''.join(self.AttrComboBox.currentText())))
            if (str(self.comboBox.currentText()) == "Perception"):
                cur.execute("INSERT INTO perceptions(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))
            if (str(self.comboBox.currentText()) == "Action"):
                cur.execute("INSERT INTO actions(version_id, value)"
                        "VALUES('%i', '%s')" % (version_id, ''.join(self.lineEdit.text())))

            db.commit()
            QtWidgets.QMessageBox.about(self.centralwidget,'Connection', 'Data Inserted Successfully')
        #open the project

    #def saveItem(self):
        #self.DatabaseWindow = QtWidgets.QMainWindow()
        #self.ui = database.Ui_DatabaseWindow()
        #self.ui.setupUi(self.DatabaseWindow)
        # item = QtWidgets.QListWidgetItem()
        # font = QtGui.QFont()
        # font.setPointSize(14)
        # item.setFont(font)
        # item.setText(self.lineEdit.text())

        # if (str(self.comboBox.currentText()) == "Category"):
        #     self.ui.CatListWidget.addItem(item)
        # elif (str(self.comboBox.currentText()) == "Type"):
        #     self.ui.TypesListWidget.addItem(item)
        # elif (str(self.comboBox.currentText()) == "Attribute"):
        #     self.ui.AttrListWidget.addItem(item)
        # elif (str(self.comboBox.currentText()) == "Fact"):
        #     self.ui.FactsListWidget.addItem(item)
        # elif (str(self.comboBox.currentText()) == "Perception"):
        #     self.ui.PercListWidget.addItem(item)
        # elif (str(self.comboBox.currentText()) == "Action"):
        #     self.ui.ActListWidget.addItem(item)

        # self.DatabaseWindow.show()



    def retranslateUi(self, AddToDatabaseWindow):
        _translate = QtCore.QCoreApplication.translate
        AddToDatabaseWindow.setWindowTitle(_translate("AddToDatabaseWindow", "MainWindow"))
        self.label.setText(_translate("AddToDatabaseWindow", "<html><head/><body><p><span style=\" font-size:28pt;\">Add to Database</span></p></body></html>"))
        self.saveBtn.setText(_translate("AddToDatabaseWindow", "Save"))
        self.comboBox.setItemText(0, _translate("AddToDatabaseWindow", "Domain"))
        self.comboBox.setItemText(1, _translate("AddToDatabaseWindow", "Category"))
        self.comboBox.setItemText(2, _translate("AddToDatabaseWindow", "Type"))
        self.comboBox.setItemText(3, _translate("AddToDatabaseWindow", "Attribute"))
        self.comboBox.setItemText(4, _translate("AddToDatabaseWindow", "Fact"))
        self.comboBox.setItemText(5, _translate("AddToDatabaseWindow", "Question"))
        self.comboBox.setItemText(6, _translate("AddToDatabaseWindow", "Perception"))
        self.comboBox.setItemText(7, _translate("AddToDatabaseWindow", "Action"))
        self.createBtn.setText(_translate("AddToDatabaseWindow", "Create a new question"))
        self.convertBtn.setText(_translate("AddToDatabaseWindow", "Create a question from a fact"))
        self.menuInteractive_System_Modelling.setTitle(_translate("AddToDatabaseWindow", "1"))


