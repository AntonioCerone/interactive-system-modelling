# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'edit_database_item.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import MySQLdb as mdb
from contextlib import closing

class Ui_EditDatabaseItemWindow(object):
    def setupUi(self, EditDatabaseItemWindow):
        EditDatabaseItemWindow.setObjectName("EditDatabaseItemWindow")
        EditDatabaseItemWindow.resize(513, 523)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(EditDatabaseItemWindow.sizePolicy().hasHeightForWidth())
        EditDatabaseItemWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(EditDatabaseItemWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 591, 51))
        self.label.setObjectName("label")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 70, 1161, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.saveBtn = QtWidgets.QPushButton(self.centralwidget)
        self.saveBtn.setGeometry(QtCore.QRect(120, 390, 241, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.saveBtn.setFont(font)
        self.saveBtn.setObjectName("saveBtn")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 190, 331, 61))
        self.lineEdit.setObjectName("lineEdit")
        self.CatComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.CatComboBox.setGeometry(QtCore.QRect(80, 200, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.CatComboBox.setFont(font)
        self.CatComboBox.setObjectName("CatComboBox")
        self.TypesComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.TypesComboBox.setFont(font)
        self.TypesComboBox.setObjectName("TypesComboBox")
        self.AttrComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.AttrComboBox.setGeometry(QtCore.QRect(80, 300, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.AttrComboBox.setFont(font)
        self.AttrComboBox.setObjectName("AttrComboBox")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 86, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 120, 300, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.editBtn = QtWidgets.QPushButton(self.centralwidget)
        self.editBtn.setGeometry(QtCore.QRect(320, 120, 130, 25))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.editBtn.setFont(font)
        self.editBtn.setObjectName("editBtn")
        EditDatabaseItemWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(EditDatabaseItemWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 513, 22))
        self.menubar.setObjectName("menubar")
        self.menuInteractive_System_Modelling = QtWidgets.QMenu(self.menubar)
        self.menuInteractive_System_Modelling.setObjectName("menuInteractive_System_Modelling")
        EditDatabaseItemWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(EditDatabaseItemWindow)
        self.statusbar.setObjectName("statusbar")
        EditDatabaseItemWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuInteractive_System_Modelling.menuAction())

        self.retranslateUi(EditDatabaseItemWindow)
        QtCore.QMetaObject.connectSlotsByName(EditDatabaseItemWindow)

        self.lineEdit.hide()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()

        self.version_id = QtWidgets.QLabel(self.centralwidget)
        self.version_id.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.version_id.setObjectName("version_id")
        self.kind = QtWidgets.QLabel(self.centralwidget)
        self.kind.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.kind.setObjectName("version_id")

        self.editBtn.clicked.connect(self.startNow)
        self.saveBtn.clicked.connect(self.saveItem)
        self.saveBtn.clicked.connect(EditDatabaseItemWindow.close)

    def simpleEdit(self):
        self.lineEdit.show()
        self.CatComboBox.hide()
        self.TypesComboBox.hide()
        self.AttrComboBox.hide()
        self.CatComboBox.clear()
        self.TypesComboBox.clear()
        self.AttrComboBox.clear()

    def editQuestion(self):
        self.CatComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 200, 331, 41))
        self.editFQ()
        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM questions WHERE version_id = '%i' AND value = '%s'" % (version_id, ''.join(self.lineEdit.text())))
            questions = cur.fetchall()
            for x in questions:
                self.CatComboBox.setCurrentText(x[4])
                self.TypesComboBox.setCurrentText(x[3])
                self.AttrComboBox.setCurrentText(x[5])
        self.lineEdit.clear()


    def editFact(self):
        self.CatComboBox.setGeometry(QtCore.QRect(80, 200, 331, 41))
        self.TypesComboBox.setGeometry(QtCore.QRect(80, 250, 331, 41))
        self.editFQ()
        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM facts WHERE version_id = '%i' AND value = '%s'" % (version_id, ''.join(self.lineEdit.text())))
            facts = cur.fetchall()
            for x in facts:
                self.CatComboBox.setCurrentText(x[3])
                self.TypesComboBox.setCurrentText(x[4])
                self.AttrComboBox.setCurrentText(x[5])
        self.lineEdit.clear()

    def editFQ(self):
        self.CatComboBox.show()
        self.TypesComboBox.show()
        self.AttrComboBox.show()
        self.lineEdit.hide()

        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM categories WHERE version_id = '%i'" % (version_id))
            categories = cur.fetchall()
            for x in categories:
                self.CatComboBox.addItem(x[2])
            cur.execute("SELECT * FROM types WHERE version_id = '%i'" % (version_id))
            types = cur.fetchall()
            for x in types:
                self.TypesComboBox.addItem(x[2])
            cur.execute("SELECT * FROM attributes WHERE version_id = '%i'" % (version_id))
            attributes = cur.fetchall()
            for x in attributes:
                self.AttrComboBox.addItem(x[2])


    def startNow(self):
        if (self.kind.text() == "domains" or 
                self.kind.text() == "categories" or 
                self.kind.text() == "types" or 
                self.kind.text() == "attributes" or 
                self.kind.text() == "perceptions" or 
                self.kind.text() == "actions"):
            self.simpleEdit()
        elif self.kind.text() == "facts":
            self.editFact()
        elif self.kind.text() == "questions":
            self.editQuestion()

    def saveItem(self):
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        version_id = int(self.version_id.text())
        kind = self.kind.text()
        with closing(db.cursor()) as cur:

            if kind == "questions":
                cur_question = str(self.TypesComboBox.currentText()) + " " + str(self.CatComboBox.currentText()) + " " + str(self.AttrComboBox.currentText()) + "?"
                self.lineEdit.setText(cur_question)

            if kind == "facts":
                cur_fact = str(self.CatComboBox.currentText()) + " " + str(self.TypesComboBox.currentText()) + " " + str(self.AttrComboBox.currentText())
                self.lineEdit.setText(cur_fact)

            if kind == "questions" or kind == "facts":
                cur.execute("UPDATE %s SET value = '%s', categories = '%s', types = '%s', attributes = '%s' WHERE version_id = '%i' AND value = '%s'"
                                                         % (kind, ''.join(self.lineEdit.text()), ''.join(self.CatComboBox.currentText()), ''.join(self.TypesComboBox.currentText()),
                                                         ''.join(self.AttrComboBox.currentText()), version_id, ''.join(self.origin_name)))

            else:
                if kind == "categories":
                    cur.execute("SELECT * FROM facts WHERE version_id = '%i' AND categories = '%s'" % (version_id, ''.join(self.origin_name)))
                    facts = cur.fetchall()
                    for x in facts:
                        new_fact = str(self.lineEdit.text()) + ' ' + x[4] + ' ' + x[5]
                        cur.execute("UPDATE facts SET categories = '%s', value = '%s' WHERE version_id = '%i' AND categories = '%s'" 
                            % (''.join(self.lineEdit.text()), new_fact, version_id, ''.join(self.origin_name)))

                elif kind == "types":
                    cur.execute("SELECT * FROM facts WHERE version_id = '%i' AND types = '%s'" % (version_id, ''.join(self.origin_name)))
                    facts = cur.fetchall()
                    for x in facts:
                        new_fact = x[3] + ' ' + str(self.lineEdit.text()) + ' ' + x[5]
                        cur.execute("UPDATE facts SET types = '%s', value = '%s' WHERE version_id = '%i' AND types = '%s'" 
                            % (''.join(self.lineEdit.text()), new_fact, version_id, ''.join(self.origin_name)))

                elif kind == "attributes":
                    cur.execute("SELECT * FROM facts WHERE version_id = '%i' AND attributes = '%s'" % (version_id, ''.join(self.origin_name)))
                    facts = cur.fetchall()
                    for x in facts:
                        new_fact = x[3] + ' ' + x[4] + ' ' + str(self.lineEdit.text())
                        cur.execute("UPDATE facts SET attributes = '%s', value = '%s' WHERE version_id = '%i' AND attributes = '%s'" 
                            % (''.join(self.lineEdit.text()), new_fact, version_id, ''.join(self.origin_name)))

                cur.execute("UPDATE %s SET value = '%s' WHERE version_id = '%i' AND value = '%s'"
                                                     % (kind, ''.join(self.lineEdit.text()), version_id, 
                                                      ''.join(self.origin_name)))
            db.commit()
     
        
        QtWidgets.QMessageBox.about(self.centralwidget,'Connection', 'Data Edited Successfully')

    def retranslateUi(self, EditDatabaseItemWindow):
        _translate = QtCore.QCoreApplication.translate
        EditDatabaseItemWindow.setWindowTitle(_translate("EditDatabaseItemWindow", "MainWindow"))
        self.label.setText(_translate("EditDatabaseItemWindow", "<html><head/><body><p><span style=\" font-size:28pt;\">Edit</span></p></body></html>"))
        self.saveBtn.setText(_translate("EditDatabaseItemWindow", "Save"))
        self.editBtn.setText(_translate("EditDatabaseItemWindow", "Edit"))
        self.label_2.setText(_translate("EditDatabaseItemWindow", "Current item"))
        self.menuInteractive_System_Modelling.setTitle(_translate("EditDatabaseItemWindow", "1"))

